// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // o "mysql" según tu preferencia
  url      = env("DATABASE_URL")
}


model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      Role  @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clients   Client[]
  sales     Sale[]
}

enum Role {
  USER
  ADMIN
}
model Client {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  sales     Sale[]
}

model Product {
  id          Int             @id @default(autoincrement())
  name        String
  description String?
  basePrice   Float
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  categoryId  Int
  category    Category        @relation(fields: [categoryId], references: [id])
  variants    ProductVariant[]
  images      ProductImage[]  // Relación con las imágenes del producto
  sales       Sale[] @relation("ProductSales")
}

model ProductImage {
  id          Int      @id @default(autoincrement())
  url         String   // URL de la imagen
  productId   Int
  product     Product  @relation(fields: [productId], references: [id])
  variantId   Int?     // Opcional: Si la imagen es específica para una variante
  variant     ProductVariant? @relation(fields: [variantId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProductVariant {
  id          Int      @id @default(autoincrement())
  sku         String   @unique
  priceOffset Float    @default(0) // Diferencia de precio respecto al precio base
  stock       Int
  productId   Int
  product     Product  @relation(fields: [productId], references: [id])
  attributes  ProductAttribute[]
  sales       Sale[]
  ProductImage ProductImage[]
  SaleItem SaleItem[]
}

model ProductAttribute {
  id          Int      @id @default(autoincrement())
  name        String   // Ej: "Color", "Talla", "Memoria"
  value       String   // Ej: "Rojo", "M", "128GB"
  variantId   Int
  variant     ProductVariant @relation(fields: [variantId], references: [id])
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  parentId  Int?     // Para subcategorías
  parent    Category? @relation("CategoryToCategory", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryToCategory")
  products  Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sale {
  id          Int      @id @default(autoincrement())
  totalAmount Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  clientId    Int
  client      Client   @relation(fields: [clientId], references: [id])
  items       SaleItem[]
  products    Product[] @relation("ProductSales")
  paymentId   Int
  payment     Payment  @relation(fields: [paymentId], references: [id])

  ProductVariant ProductVariant[]
}

model SaleItem {
  id          Int      @id @default(autoincrement())
  quantity    Int
  price       Float
  saleId      Int
  sale        Sale     @relation(fields: [saleId], references: [id])
  variantId   Int
  variant     ProductVariant @relation(fields: [variantId], references: [id])
}

model Payment {
  id          Int      @id @default(autoincrement())
  amount      Float
  status      String   @default("PENDING")
  paymentMethod String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sales       Sale[]
}